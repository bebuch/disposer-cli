; define parameter sets to avoid duplication in modules
parameter_set
	io
		sequence_start = 1
		camera_start = 1
		sequence_count = 32

	save
		dir = /media/data/projekte/disposer_module/data/target

	load
		dir = /home/bebuch/media/data/cordless/S4G5
		camera_count = 2
		fixed_id = 0
		type_uint8 = true

	std_load
		sequence_start = 1
		camera_start = 1
		id_digits = 3
		camera_digits = 1
		position_digits = 3
		dir = /home/bebuch/media/data/cordless/S4G5_disposer
		fixed_id = 1
		big_pattern = ${id}_i_${cam}_${pos}.big
		type_uint8 = true

	std_save
		sequence_start = 1
		sequence_count = 1
		camera_start = 1
		camera_count = 1
		id_digits = 3
		camera_digits = 1
		position_digits = 3
		dir = /home/bebuch/media/data/cordless/S4G5_disposer_out
		fixed_id = 1
		big_pattern = ${id}_${cam}_${pos}.big


; 	calc
; 		use_dark_image = true
; 		use_bright_image = true
; 		use_second_direction = true
; 		gray_count = 7
; 		cosine_count = 8
; 		min_intensity = 0
; 		max_intensity = 255
; 		min_modulation = 4
; 		min_intensity_range = 4

; List of modules
module
; 	start1 = async_program
; 		command = test.sh
; 		parameters = Das "ist ein" "test" "so soll\" es\" sein   !\\" d
;
; 	start2 = async_program
; 		command = test.sh
; 		parameters = Das "ist ein" te"st "so soll\" es\" sein   !\\" d
;
; 	end1 = async_get
;
; 	end2 = async_get_string
;
; 	output = add_to_log

	load = big_loader
		parameter_set = io
		parameter_set = load
		big_pattern = ${id}_i_${cam}_${pos}.big

	load_img = big_loader
		sequence_start = 1
		camera_start = 1
		sequence_count = 1
		id_digits = 3
		camera_digits = 1
		position_digits = 3
		dir = /home/bebuch/media/data/cordless/S4G5_disposer
		camera_count = 1
		fixed_id = 1
		type_uint8 = true
		big_pattern = ${id}_i_${cam}_${pos}.big

	load_big = big_loader
		sequence_start = 1
		camera_start = 1
		sequence_count = 20
		id_digits = 3
		camera_digits = 1
		position_digits = 3
		dir = /home/bebuch/media/data/cordless/S4G5_disposer
		type_uint8 = true
		camera_count = 2
		fixed_id = 1
		big_pattern = ${id}_i_${cam}_${pos}.big

	load_png = png_loader
		sequence_start = 1
		camera_start = 1
		sequence_count = 20
		id_digits = 3
		camera_digits = 1
		position_digits = 3
		dir = /home/bebuch/media/data/cordless/S4G5_disposer
		type_gray8 = true
		camera_count = 2
		fixed_id = 1
		big_pattern = ${id}_i_${cam}_${pos}.big
; 		tar = true

	save_png = png_saver
		sequence_start = 1
		camera_start = 1
		id_digits = 3
		camera_digits = 1
		position_digits = 3
		dir = /home/bebuch/media/data/cordless/S4G5_disposer_out
		fixed_id = 1
		big_pattern = ${id}_i_${cam}_${pos}.big

	save_big = big_saver
		sequence_start = 1
		camera_start = 1
		id_digits = 3
		camera_digits = 1
		position_digits = 3
		dir = /home/bebuch/media/data/cordless/S4G5_disposer_out
		fixed_id = 1
		big_pattern = ${id}_i_${cam}_${pos}.big

	load_tar = big_loader
		parameter_set = io
		parameter_set = load
		tar = true

	save = big_saver
		parameter_set = io
		parameter_set = save

	save_tar = big_saver
		parameter_set = io
		parameter_set = save
		tar = true

	sub = subbitmap
		x = 100
		y = 100
		width = 100
		height = 100

	show_big = show_image
		window_title = Image
		width = 640
		height = 474

	show_color = show_image
		window_title = Image
		width = 2048
		height = 1088

	show = show_image
		window_title = Image
		width = 2048
		height = 1088

	img_join = bitmap_vector_join
		images_per_line = 4
; 		default_value = 0

	img_join_5x5 = bitmap_vector_join
		images_per_line = 5

	demosaic_4x4 = demosaic
		x_count = 4
		y_count = 4

	demosaic_5x5 = demosaic
		x_count = 5
		y_count = 5

	demosaic_2x2 = demosaic
		x_count = 2
		y_count = 2

	cam_info = camera_ximea
		list_cameras = true

	color_cam = camera_ximea
		id = 0
		pixel_format = rgb8

	log = add_to_log

	cam = camera_ximea
		id = 0
		use_camera_region = true
		x_offset = 0
		y_offset = 32
		width = 2048
		height = 1024
		pixel_format = mono8

	cam_nif = camera_ximea
		id = 0
		x_offset = 0
		y_offset = 3
		width = 2045
		height = 1080
		pixel_format = mono8


	scale10to16 = pixel_transform
		min = 0
		max = 1023
		new_min = 0
		new_max = 65535


	load_dark_cam1 = big_loader
		parameter_set = std_load
		sequence_start = 1
		sequence_count = 1
		camera_start = 1
		camera_count = 1

	load_bright_cam1 = big_loader
		parameter_set = std_load
		sequence_start = 2
		sequence_count = 1
		camera_start = 1
		camera_count = 1

	load_gray1_cam1 = big_loader
		parameter_set = std_load
		sequence_start = 3
		sequence_count = 5
		camera_start = 1
		camera_count = 1

	load_cos1_cam1 = big_loader
		parameter_set = std_load
		sequence_start = 8
		sequence_count = 4
		camera_start = 1
		camera_count = 1

	load_gray2_cam1 = big_loader
		parameter_set = std_load
		sequence_start = 12
		sequence_count = 5
		camera_start = 1
		camera_count = 1

	load_cos2_cam1 = big_loader
		parameter_set = std_load
		sequence_start = 17
		sequence_count = 4
		camera_start = 1
		camera_count = 1

	load_dark_cam2 = big_loader
		parameter_set = std_load
		sequence_start = 1
		sequence_count = 1
		camera_start = 2
		camera_count = 1

	load_bright_cam2 = big_loader
		parameter_set = std_load
		sequence_start = 2
		sequence_count = 1
		camera_start = 2
		camera_count = 1

	load_gray1_cam2 = big_loader
		parameter_set = std_load
		sequence_start = 3
		sequence_count = 5
		camera_start = 2
		camera_count = 1

	load_cos1_cam2 = big_loader
		parameter_set = std_load
		sequence_start = 8
		sequence_count = 4
		camera_start = 2
		camera_count = 1

	load_gray2_cam2 = big_loader
		parameter_set = std_load
		sequence_start = 12
		sequence_count = 5
		camera_start = 2
		camera_count = 1

	load_cos2_cam2 = big_loader
		parameter_set = std_load
		sequence_start = 17
		sequence_count = 4
		camera_start = 2
		camera_count = 1

	gray_code1_cam1 = gray_code_decoder
	gray_code2_cam1 = gray_code_decoder
	gray_code1_cam2 = gray_code_decoder
	gray_code2_cam2 = gray_code_decoder

	raw_phase1_cam1 = raw_phase
	raw_phase2_cam1 = raw_phase
; 		rotate = 3
; 		reverse_images = true
	raw_phase1_cam2 = raw_phase
	raw_phase2_cam2 = raw_phase
; 		reverse_images = true

	unwrapp1_cam1 = phase_unwrapp_by_index
	unwrapp2_cam1 = phase_unwrapp_by_index
	unwrapp1_cam2 = phase_unwrapp_by_index
	unwrapp2_cam2 = phase_unwrapp_by_index

	save_cam1_gray_index1 = big_saver
		parameter_set = std_save
		sequence_start = 1
		sequence_count = 1
		camera_start = 1
		camera_count = 1

	save_cam1_phase1 = big_saver
		parameter_set = std_save
		sequence_start = 2
		sequence_count = 1
		camera_start = 1
		camera_count = 1

	save_cam1_modulation1 = big_saver
		parameter_set = std_save
		sequence_start = 3
		sequence_count = 1
		camera_start = 1
		camera_count = 1

	save_cam1_fine1 = big_saver
		parameter_set = std_save
		sequence_start = 4
		sequence_count = 1
		camera_start = 1
		camera_count = 1

	save_cam1_gray_index2 = big_saver
		parameter_set = std_save
		sequence_start = 5
		sequence_count = 1
		camera_start = 1
		camera_count = 1

	save_cam1_phase2 = big_saver
		parameter_set = std_save
		sequence_start = 6
		sequence_count = 1
		camera_start = 1
		camera_count = 1

	save_cam1_modulation2 = big_saver
		parameter_set = std_save
		sequence_start = 7
		sequence_count = 1
		camera_start = 1
		camera_count = 1

	save_cam1_fine2 = big_saver
		parameter_set = std_save
		sequence_start = 8
		sequence_count = 1
		camera_start = 1
		camera_count = 1

	save_cam2_gray_index1 = big_saver
		parameter_set = std_save
		sequence_start = 1
		sequence_count = 1
		camera_start = 2
		camera_count = 1

	save_cam2_phase1 = big_saver
		parameter_set = std_save
		sequence_start = 2
		sequence_count = 1
		camera_start = 2
		camera_count = 1

	save_cam2_modulation1 = big_saver
		parameter_set = std_save
		sequence_start = 3
		sequence_count = 1
		camera_start = 2
		camera_count = 1

	save_cam2_fine1 = big_saver
		parameter_set = std_save
		sequence_start = 4
		sequence_count = 1
		camera_start = 2
		camera_count = 1

	save_cam2_gray_index2 = big_saver
		parameter_set = std_save
		sequence_start = 5
		sequence_count = 1
		camera_start = 2
		camera_count = 1

	save_cam2_phase2 = big_saver
		parameter_set = std_save
		sequence_start = 6
		sequence_count = 1
		camera_start = 2
		camera_count = 1

	save_cam2_modulation2 = big_saver
		parameter_set = std_save
		sequence_start = 7
		sequence_count = 1
		camera_start = 2
		camera_count = 1

	save_cam2_fine2 = big_saver
		parameter_set = std_save
		sequence_start = 8
		sequence_count = 1
		camera_start = 2
		camera_count = 1


; 	raster = raster_uint8_t
; 		raster = 1

; 	save_float = sequence_saver_float
; 		parameter_set = save
; 		parameter_set = calc
; 		name = hrth
;
; 	calc_raw = phase_calculator
; 		parameter_set = calc
;
; 	calc_fine = phase_calculator
; 		parameter_set = calc
; 		calc_fine = true
; 		trans_scale_xi = -10.54
; 		trans_scale_eta = -10.54
; 		trans_scale_pps = 0.02
; 		p_lambda = 16

; List of process chains
chain
	fine_phase
		load_dark_cam1
			->
				image = cam1_dark
		load_bright_cam1
			->
				image = cam1_bright
		load_gray1_cam1
			->
				vector = cam1_gray1
		load_cos1_cam1
			->
				vector = cam1_cos1
		gray_code1_cam1
			<-
				bright_image = cam1_bright
				dark_image = cam1_dark
				gray_code_images = cam1_gray1
			->
				index_image = cam1_index1
		save_cam1_gray_index1
			<-
				image = cam1_index1
		raw_phase1_cam1
			<-
				cos_images = cam1_cos1
			->
				phase_image = cam1_phase1
				modulation_image = cam1_mod1
		save_cam1_phase1
			<-
				image = cam1_phase1
		save_cam1_modulation1
			<-
				image = cam1_mod1
		unwrapp1_cam1
			<-
				raw_phase_image = cam1_phase1
				index_image = cam1_index1
			->
				fine_phase_image = cam1_fine1
		save_cam1_fine1
			<-
				image = cam1_fine1
		load_gray2_cam1
			->
				vector = cam1_gray2
		load_cos2_cam1
			->
				vector = cam1_cos2
		gray_code2_cam1
			<-
				bright_image = cam1_bright
				dark_image = cam1_dark
				gray_code_images = cam1_gray2
			->
				index_image = cam1_index2
		save_cam1_gray_index2
			<-
				image = cam1_index2
		raw_phase2_cam1
			<-
				cos_images = cam1_cos2
			->
				phase_image = cam1_phase2
				modulation_image = cam1_mod2
		save_cam1_phase2
			<-
				image = cam1_phase2
		save_cam1_modulation2
			<-
				image = cam1_mod2
		unwrapp2_cam1
			<-
				raw_phase_image = cam1_phase2
				index_image = cam1_index2
			->
				fine_phase_image = cam1_fine2
		save_cam1_fine2
			<-
				image = cam1_fine2
		load_dark_cam2
			->
				image = cam2_dark
		load_bright_cam2
			->
				image = cam2_bright
		load_gray1_cam2
			->
				vector = cam2_gray1
		load_cos1_cam2
			->
				vector = cam2_cos1
		gray_code1_cam2
			<-
				bright_image = cam2_bright
				dark_image = cam2_dark
				gray_code_images = cam2_gray1
			->
				index_image = cam2_index1
		save_cam2_gray_index1
			<-
				image = cam2_index1
		raw_phase1_cam2
			<-
				cos_images = cam2_cos1
			->
				phase_image = cam2_phase1
				modulation_image = cam2_mod1
		save_cam2_phase1
			<-
				image = cam2_phase1
		save_cam2_modulation1
			<-
				image = cam2_mod1
		unwrapp1_cam2
			<-
				raw_phase_image = cam2_phase1
				index_image = cam2_index1
			->
				fine_phase_image = cam2_fine1
		save_cam2_fine1
			<-
				image = cam2_fine1
		load_gray2_cam2
			->
				vector = cam2_gray2
		load_cos2_cam2
			->
				vector = cam2_cos2
		gray_code2_cam2
			<-
				bright_image = cam2_bright
				dark_image = cam2_dark
				gray_code_images = cam2_gray2
			->
				index_image = cam2_index2
		save_cam2_gray_index2
			<-
				image = cam2_index2
		raw_phase2_cam2
			<-
				cos_images = cam2_cos2
			->
				phase_image = cam2_phase2
				modulation_image = cam2_mod2
		save_cam2_phase2
			<-
				image = cam2_phase2
		save_cam2_modulation2
			<-
				image = cam2_mod2
		unwrapp2_cam2
			<-
				raw_phase_image = cam2_phase2
				index_image = cam2_index2
			->
				fine_phase_image = cam2_fine2
		save_cam2_fine2
			<-
				image = cam2_fine2


	show
		load_img
			->
				image = load
		show_big
			<-
				image = load

	convert
		load_big
			->
				sequence = data
		save_png
			<-
				sequence = data

	png_to_big
		load_png
			->
				sequence = data
		save_big
			<-
				sequence = data

; 	list_cams
; 		cam_info
; 			->
; 				info = text
; 		log
; 			<-
; 				string = text

; 	live
; 		color_cam
; 			->
; 				image = load
; 		demosaic_4x4
; 			<-
; 				image = load
; 			->
; 				image_vector = images
; 		img_join
; 			<-
; 				image_vector = images
; 			->
; 				image = out
; 		show_color
; 			<-
; 				image = out

; 	live
; 		cam
; 			->
; 				image = img
; 		demosaic_4x4
; 			<-
; 				image = img
; 			->
; 				image_vector = images
; 		img_join
; 			<-
; 				image_vector = images
; 			->
; 				image = out
; 		show
; 			<-
; 				image = out

; 	live
; 		cam
; 			->
; 				image = img
; 		scale10to16
; 			<-
; 				image = img
; 			->
; 				image = out
; 		show
; 			<-
; 				image = out


; 	live
; 		color_cam
; 			->
; 				image = img
; 		show
; 			<-
; 				image = img
;

; 	toTarSequence
; 		load
; 			->
; 				sequence = load
; 		sub
; 			<-
; 				sequence = load
; 			->
; 				sequence = save
; 		save_tar
; 			<-
; 				sequence = save
;
; 	toTarVector
; 		load
; 			->
; 				vector = load
; 		sub
; 			<-
; 				vector = load
; 			->
; 				vector = save
; 		save_tar
; 			<-
; 				vector = save
;
; 	toTarImage
; 		load
; 			->
; 				image = load
; 		sub
; 			<-
; 				image = load
; 			->
; 				image = save
; 		save_tar
; 			<-
; 				image = save
;
; 	fromTarSequence
; 		load_tar
; 			->
; 				sequence = load
; 		sub
; 			<-
; 				sequence = load
; 			->
; 				sequence = save
; 		save
; 			<-
; 				sequence = save
;
; 	fromTarVector
; 		load_tar
; 			->
; 				vector = load
; 		sub
; 			<-
; 				vector = load
; 			->
; 				vector = save
; 		save
; 			<-
; 				vector = save
;
; 	fromTarImage
; 		load_tar
; 			->
; 				image = load
; 		sub
; 			<-
; 				image = load
; 			->
; 				image = save
; 		save
; 			<-
; 				image = save
;
; 	toTar
; 		load
; 			->
; 				sequence = load
; 		raster
; 			<-
; 				sequence = load
; 			->
; 				sequence = out
; 		save
; 			<-
; 				sequence = out

; 	serial
; 		start1
; 			->
; 				future = async1
; 		end1
; 			<-
; 				future = async1
; 		start2
; 			->
; 				future_output = async2
; 		end2
; 			<-
; 				future = async2
; 			->
; 				result = message
; 		output
; 			<-
; 				string = message
;
; 	parallel
; 		start1
; 			->
; 				future = async1
; 		start2
; 			->
; 				future_output = async2
; 		end1
; 			<-
; 				future = async1
; 		end2
; 			<-
; 				future = async2
; 			->
; 				result = message
; 		output
; 			<-
; 				string = message

; 	except
; 		load
; 			->
; 				sequence = load
; 		save_float
; 			<-
; 				; will throw, type mismatch (float <- uint8)
; 				sequence = load
;
; 	raw phase
; 		load
; 			->
; 				sequence = load
; 		calc_raw
; 			<-
; 				sequence = load
; 			->
; 				xi_phase = raw
; 				xi_modulation = mod
; 		save_float
; 			<-
; 				sequence = raw
; 		save_uint8_t
; 			<-
; 				sequence = mod
;
; 	fine phase
; 		load
; 			->
; 				sequence = load
; 		calc_fine
; 			<-
; 				sequence = load
; 			->
; 				eta_phase = fine
; 				eta_modulation = mod
; 		save_float
; 			<-
; 				sequence = fine
; 		save_uint8_t
; 			<-
; 				sequence = mod
